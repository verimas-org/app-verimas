 name: ecr push image

on:
  push:

jobs:
  push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Get current date
        id: date
        run: echo "CURRENT_DATETIME=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
        
      - uses: actions/checkout@v3
     
      # - uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-region: "ap-northeast-1"
      #     role-to-assume: ${{ secrets.AWS_ECR_ROLE_ARN }}

      # - uses: aws-actions/amazon-ecr-login@v1
      #   id: login-ecr

      - name: Login to Docker registry
          uses: docker/login-action@v2
          with:
            registry: docker.stg.petorch.live
            username: ${{ secrets.DOCKER_USER }}
            password: ${{ secrets.DOCKER_PWD }}

      - name: build and push docker image
        env:
          REGISTRY: "docker.stg.petorch.live"
          REPOSITORY: "app/hpverimas"
          IMAGE_TAG: rev-${{ env.CURRENT_DATETIME }}
          K8S_DEPLOY: "hp-verimas/overlays/stg/deploy-hp.yaml"
        run: |
          docker build . --tag ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          # chmod +x ./bin/cleanup_images.sh
          # ./bin/cleanup_images.sh ${{ env.REPOSITORY }} "yzy-"
          # call jenkins job to release this image
          curl "https://${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }}@jenkins.stg.petorch.live/job/application/job/simple-webapp-test-release/buildWithParameters?token=${{ secrets.JENKINS_TOKEN }}&env=stg&k8s_deploy_file=${{ env.K8S_DEPLOY }}&docker_image_server=internal&image_name=${{ env.REPOSITORY }}&image_tag=${{ env.IMAGE_TAG }}&test_or_release=TestAndRelease"

      # NOT pushing image to k8s anymore, using pulling by argocd instead
      # - uses: aws-actions/configure-aws-credentials@v2
          #   with:
          #     aws-region: "ap-northeast-1"
      #     role-to-assume: ${{ secrets.AWS_EKS_ROLE_ARN }}

        # - name: reflect image to EKS
          #   run: |
          #     aws eks update-kubeconfig --name ${{ secrets.AWS_EKS_CLUSTER_NAME }}
      #     kubectl rollout restart deploy demo-yzy2
